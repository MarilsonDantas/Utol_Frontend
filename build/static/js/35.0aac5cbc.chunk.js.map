{"version":3,"sources":["app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"names":["SimpleListDnD","Component","constructor","props","count","super","onDragEnd","result","destination","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","this","state","source","index","setState","length","v","k","map","id","content","render","droppableId","provided","snapshot","droppableProps","ref","innerRef","style","isDraggingOver","borderRadius","background","padding","width","item","key","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","boxShadow","placeholder","SimpleHorizontalList","bind","direction","display","overflow","getItems","offset","getItemStyle","getListStyle","TwoListDnD","selected","id2List","droppable","droppable2","getList","droppableSource","droppableDestination","sourceClone","destClone","move","className","AppDragAndDrop","routeSegments","name","path","title"],"mappings":"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","file":"static/js/35.0aac5cbc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  boxShadow: \"var(--elevation-z4)\",\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging ? \"var(--primary)\" : \"var(--bg-paper)\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  borderRadius: \"4px\",\r\n  background: isDraggingOver ? \"rgba(0,0,0, .1)\" : \"var(--bg-default)\",\r\n  padding: grid,\r\n  width: 250\r\n});\r\n\r\nclass SimpleListDnD extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: getItems(10)\r\n    };\r\n  }\r\n\r\n  onDragEnd = result => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n            >\r\n              {this.state.items.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                      )}\r\n                    >\r\n                      {item.content}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleListDnD;\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n  boxShadow: \"var(--elevation-z4)\",\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging ? \"var(--primary)\" : \"var(--bg-paper)\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  borderRadius: \"4px\",\r\n  background: isDraggingOver ? \"rgba(0,0,0, .1)\" : \"var(--bg-default)\",\r\n  display: \"flex\",\r\n  padding: grid,\r\n  overflow: \"auto\"\r\n});\r\n\r\nclass SimpleHorizontalList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: getItems(6)\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  }\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n              {...provided.droppableProps}\r\n            >\r\n              {this.state.items.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                      )}\r\n                    >\r\n                      {item.content}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleHorizontalList;\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  boxShadow: \"var(--elevation-z4)\",\r\n  borderRadius: \"4px\",\r\n  // change background colour if dragging\r\n  background: isDragging ? \"var(--primary)\" : \"var(--bg-paper)\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  borderRadius: \"4px\",\r\n  background: isDraggingOver ? \"rgba(0,0,0, .1)\" : \"var(--bg-default)\",  padding: grid,\r\n  width: 250\r\n});\r\n\r\nclass TwoListDnD extends Component {\r\n  state = {\r\n    items: getItems(10),\r\n    selected: getItems(5, 10)\r\n  };\r\n\r\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\r\n  id2List = {\r\n    droppable: \"items\",\r\n    droppable2: \"selected\"\r\n  };\r\n\r\n  getList = id => this.state[this.id2List[id]];\r\n\r\n  onDragEnd = result => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index\r\n      );\r\n\r\n      let state = { items };\r\n\r\n      if (source.droppableId === \"droppable2\") {\r\n        state = { selected: items };\r\n      }\r\n\r\n      this.setState(state);\r\n    } else {\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      this.setState({\r\n        items: result.droppable,\r\n        selected: result.droppable2\r\n      });\r\n    }\r\n  };\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <div className=\"flex justify-around\">\r\n          <Droppable droppableId=\"droppable\">\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n              >\r\n                {this.state.items.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                      >\r\n                        {item.content}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n          <Droppable droppableId=\"droppable2\">\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n              >\r\n                {this.state.selected.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                      >\r\n                        {item.content}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TwoListDnD;\r\n","import React from \"react\";\r\nimport SimpleListDnD from \"./SimpleListDnD\";\r\nimport { Breadcrumb, SimpleCard } from \"matx\";\r\nimport SimpleHorizontalList from \"./SimpleHorizontalList\";\r\nimport TwoListDnD from \"./TwoListDnD\";\r\n\r\nconst AppDragAndDrop = () => {\r\n  return (\r\n    <div className=\"m-sm-30\">\r\n      <div className=\"mb-sm-30\">\r\n        <Breadcrumb\r\n          routeSegments={[\r\n            { name: \"others\", path: \"/drag-and-drop\" },\r\n            { name: \"Drag and Drop\" }\r\n          ]}\r\n        />\r\n      </div>\r\n      <SimpleCard title=\"Simple List Drag and Drop\">\r\n        <SimpleListDnD />\r\n      </SimpleCard>\r\n      <div className=\"py-3\" />\r\n      <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\r\n        <SimpleHorizontalList />\r\n      </SimpleCard>\r\n      <div className=\"py-3\" />\r\n      <SimpleCard title=\"Simple Two List Drag and Drop\">\r\n        <TwoListDnD />\r\n      </SimpleCard>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppDragAndDrop;\r\n"],"sourceRoot":""}