{"version":3,"sources":["app/views/dashboard/criarCurso.jsx"],"names":["CriarCurso","Component","state","nome","tipo","descricao","handleSubmit","event","a","preventDefault","dadosCurso","usuario_inclusao","props","user","idusuario","idprofessor_responsavel","idprofessor","api","post","history","push","handleChange","persist","this","setState","target","name","value","onTagsChange","values","label","render","className","routeSegments","path","title","ref","onSubmit","onError","errors","container","spacing","item","lg","md","sm","xs","onChange","type","validators","errorMessages","options","getOptionLabel","option","renderInput","params","variant","fullWidth","color","withStyles","withTheme","withRouter","connect"],"mappings":"6QAwBA,MAAMA,UAAmBC,YAAW,eAAD,iCACjCC,MAAQ,CACNC,KAAM,GACNC,KAAM,GACNC,UAAW,IAJoB,KAOjCC,aAPiC,uCAOlB,WAAOC,GAAP,eAAAC,EAAA,6DACbD,EAAME,kBAEAC,EAAa,EAAKR,OAEbS,iBAAmB,EAAKC,MAAMC,KAAKC,UAC9CJ,EAAWK,wBAA0B,EAAKH,MAAMC,KAAKG,YANxC,SAQUC,IAAIC,KAAK,aAAcR,GARjC,cAUb,EAAKE,MAAMO,QAAQC,KAAK,mBAVX,2CAPkB,2DAoBjCC,aAAed,IACbA,EAAMe,UACNC,KAAKC,SAAS,CAAE,CAACjB,EAAMkB,OAAOC,MAAOnB,EAAMkB,OAAOE,SAtBnB,KAyBjCC,aAAe,CAACrB,EAAOsB,KACrBN,KAAKC,SAAS,CACZpB,KAAMyB,EAAOC,SAIjBC,SAAU,IAAD,EAIHR,KAAKrB,MAFPC,EAFK,EAELA,KACAE,EAHK,EAGLA,UAGF,OACE,yBAAK2B,UAAU,WAEb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CACEC,cAAe,CACb,CAAEP,KAAM,cAAeQ,KAAM,wBAC7B,CAAER,KAAM,8BAKd,kBAAC,IAAD,CAAYS,MAAM,0BAChB,6BACA,kBAAC,gBAAD,CACEC,IAAI,OACJC,SAAUd,KAAKjB,aACfgC,QAASC,GAAU,MAEnB,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACnC,kBAAC,gBAAD,CACEd,UAAU,cACVF,MAAM,gBACNiB,SAAUxB,KAAKF,aACf2B,KAAK,OACLtB,KAAK,OACLC,MAAOxB,EACP8C,WAAY,CACV,YAEFC,cAAe,CAAC,qBAIpB,kBAAC,IAAD,CAAMR,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACnC,kBAAC,IAAD,CACEd,UAAU,cACVmB,QAAS,CAAC,CAACrB,MAAO,cAAe,CAACA,MAAO,SAAU,CAACA,MAAO,uBAC3DiB,SAAUxB,KAAKK,aACfF,KAAK,OACL0B,eAAgBC,GAAUA,EAAOvB,MACjCwB,YAAaC,GACX,kBAAC,IAAD,iBACMA,EADN,CAEEzB,MAAO,OACP0B,QAAQ,WACRC,WAAS,SAOnB,kBAAC,IAAD,CAAMf,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACnC,kBAAC,gBAAD,CACEd,UAAU,cACVF,MAAM,kBACNiB,SAAUxB,KAAKF,aACf2B,KAAK,OACLtB,KAAK,YACLC,MAAOtB,EACP4C,WAAY,CACV,YAEFC,cAAe,CAAC,qBAGtB,kBAAC,IAAD,CAAQQ,MAAM,UAAUF,QAAQ,YAAYR,KAAK,UAC/C,kBAAC,IAAD,aACA,0BAAMhB,UAAU,mBAAhB,eAwBC2B,sBAAW,GAAI,CAAEC,WAAW,GAA5BD,CACbE,YACEC,YARoB5D,IAAK,CAC3BW,KAAMX,EAAMW,OAOe,GAAzBiD,CACG9D","file":"static/js/37.25a97335.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport { Breadcrumb, SimpleCard } from \"matx\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Grid,\r\n  TextField\r\n} from \"@material-ui/core\";\r\n\r\nimport \"date-fns\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nimport api from \"../../services/api\";\r\n\r\n\r\nclass CriarCurso extends Component {\r\n  state = {\r\n    nome: \"\",\r\n    tipo: \"\",\r\n    descricao: \"\"\r\n  };\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const dadosCurso = this.state;\r\n\r\n    dadosCurso.usuario_inclusao = this.props.user.idusuario;\r\n    dadosCurso.idprofessor_responsavel = this.props.user.idprofessor;\r\n\r\n    const response = await api.post('storeCurso', dadosCurso);\r\n\r\n    this.props.history.push(\"/dashboard/home\");\r\n  };\r\n\r\n  handleChange = event => {\r\n    event.persist();\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  onTagsChange = (event, values) => {\r\n    this.setState({\r\n      tipo: values.label\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      nome,\r\n      descricao\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"m-sm-30\">\r\n\r\n        <div className=\"mb-sm-30\">\r\n          <Breadcrumb\r\n            routeSegments={[\r\n              { name: \"Meus Cursos\", path: \"/dashboard/analytics\" },\r\n              { name: \"Criação de curso\" }\r\n            ]}\r\n          />\r\n        </div>\r\n\r\n        <SimpleCard title=\"Criação de curso\">\r\n          <div>\r\n          <ValidatorForm\r\n            ref=\"form\"\r\n            onSubmit={this.handleSubmit}\r\n            onError={errors => null}\r\n          >\r\n            <Grid container spacing={6}>\r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"mb-4 w-full\"\r\n                  label=\"Nome do curso\"\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"nome\"\r\n                  value={nome}\r\n                  validators={[\r\n                    \"required\",\r\n                  ]}\r\n                  errorMessages={[\"Obrigatório\"]}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item lg={6} md={6} sm={12} xs={12}>\r\n                <Autocomplete\r\n                  className=\"mb-6 w-full\"\r\n                  options={[{label: 'Exercicios'}, {label: \"Aulas\"}, {label: \"Aulas + exercicios\"}]}\r\n                  onChange={this.onTagsChange}\r\n                  name=\"tipo\"\r\n                  getOptionLabel={option => option.label}\r\n                  renderInput={params => (\r\n                    <TextField\r\n                      {...params}\r\n                      label={\"Tipo\"}\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"mb-4 w-full\"\r\n                  label=\"Descrição\"\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"descricao\"\r\n                  value={descricao}\r\n                  validators={[\r\n                    \"required\",\r\n                  ]}\r\n                  errorMessages={[\"Obrigatório\"]}\r\n                />\r\n              </Grid>\r\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\r\n              <Icon>send</Icon>\r\n              <span className=\"pl-2 capitalize\">Criar</span>\r\n            </Button>\r\n          </ValidatorForm>\r\n        </div>\r\n        </SimpleCard>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nCriarCurso.propTypes = {\r\n  user: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  user: state.user,\r\n});\r\n\r\n// export default withStyles({}, { withTheme: true })(Dashboard1);\r\n\r\nexport default withStyles({}, { withTheme: true })(\r\n  withRouter(\r\n    connect(mapStateToProps, {\r\n    })(CriarCurso)\r\n  )\r\n);"],"sourceRoot":""}