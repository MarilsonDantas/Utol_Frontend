{"version":3,"sources":["../node_modules/@material-ui/core/esm/Table/Tablelvl2Context.js","../node_modules/@material-ui/core/esm/Table/TableContext.js","../node_modules/@material-ui/core/esm/Table/Table.js","../node_modules/@material-ui/core/esm/TableHead/TableHead.js","../node_modules/@material-ui/core/esm/TableRow/TableRow.js","../node_modules/@material-ui/core/esm/TableCell/TableCell.js","../node_modules/@material-ui/core/esm/TableBody/TableBody.js","app/views/dashboard/exercicio.jsx"],"names":["Tablelvl2Context","React","TableContext","Table","props","ref","classes","className","_props$component","component","Component","_props$padding","padding","_props$size","size","_props$stickyHeader","stickyHeader","other","_objectWithoutProperties","table","Provider","value","_extends","role","clsx","root","withStyles","theme","display","width","borderCollapse","borderSpacing","typography","body2","spacing","color","palette","text","secondary","textAlign","captionSide","name","tablelvl2","variant","TableHead","TableRow","_props$hover","hover","_props$selected","selected","head","footer","verticalAlign","outline","backgroundColor","action","fade","main","selectedOpacity","TableCell","_props$align","align","paddingProp","scopeProp","scope","sizeProp","sortDirection","variantProp","isHeadCell","ariaSort","concat","capitalize","borderBottom","type","lighten","divider","darken","primary","lineHeight","pxToRem","fontWeight","fontWeightMedium","body","fontSize","sizeSmall","paddingRight","paddingLeft","paddingCheckbox","paddingNone","alignLeft","alignCenter","alignRight","flexDirection","alignJustify","position","top","left","zIndex","background","default","TableBody","Exercicio","state","idaula","this","location","aula","contasDebito","contasCredito","movimentacaoDebito","movimentacaoCredito","totalDebito","totalCredito","historico","handleSubmit","event","a","preventDefault","dadosExercicio","id_usuario","user","idusuario","id_exercicio","exercicio","idexercicio","api","post","handleChange","e","includes","target","dataset","id","setState","console","log","valorConta","movimentacoesPassadas","forEach","quantidadeDebito","valorDebito","isDebito","reduce","b","quantidadeCredito","valorCredito","onDebitoChange","values","onCreditoChange","componentDidMount","get","contasAula","contasDebitoArray","contasCreditoArray","data","conta","tipo","push","resultDebito","resultCredito","render","routeSegments","path","title","onSubmit","onChange","onError","errors","container","style","paddingBottom","item","lg","md","sm","xs","nome","descricao","label","justifyContent","options","getOptionLabel","option","renderInput","params","placeholder","fullWidth","length","border","marginBottom","borderRadius","colSpan","map","movimentacao","index","movimentacaoDebitoValor","movimentacaoDebitoQuantidade","key","styleTableCell","inputStyle","data-id","atributo","disabled","movimentacaoCreditoValor","movimentacaoCreditoquantidade","withTheme","withRouter","connect"],"mappings":"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","file":"static/js/20.774322db.chunk.js","sourcesContent":["import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar Tablelvl2Context = /*#__PURE__*/React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  Tablelvl2Context.displayName = 'Tablelvl2Context';\n}\n\nexport default Tablelvl2Context;","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar TableContext = /*#__PURE__*/React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  TableContext.displayName = 'TableContext';\n}\n\nexport default TableContext;","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport TableContext from './TableContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'table',\n      width: '100%',\n      borderCollapse: 'collapse',\n      borderSpacing: 0,\n      '& caption': _extends({}, theme.typography.body2, {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n        textAlign: 'left',\n        captionSide: 'bottom'\n      })\n    },\n\n    /* Styles applied to the root element if `stickyHeader={true}`. */\n    stickyHeader: {\n      borderCollapse: 'separate'\n    }\n  };\n};\nvar defaultComponent = 'table';\nvar Table = /*#__PURE__*/React.forwardRef(function Table(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      _props$padding = props.padding,\n      padding = _props$padding === void 0 ? 'default' : _props$padding,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      _props$stickyHeader = props.stickyHeader,\n      stickyHeader = _props$stickyHeader === void 0 ? false : _props$stickyHeader,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"padding\", \"size\", \"stickyHeader\"]);\n\n  var table = React.useMemo(function () {\n    return {\n      padding: padding,\n      size: size,\n      stickyHeader: stickyHeader\n    };\n  }, [padding, size, stickyHeader]);\n  return /*#__PURE__*/React.createElement(TableContext.Provider, {\n    value: table\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    role: Component === defaultComponent ? null : 'table',\n    ref: ref,\n    className: clsx(classes.root, className, stickyHeader && classes.stickyHeader)\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes = {\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   */\n  padding: PropTypes.oneOf(['default', 'checkbox', 'none']),\n\n  /**\n   * Allows TableCells to inherit size of the Table.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * Set the header sticky.\n   *\n   * ⚠️ It doesn't work with IE 11.\n   */\n  stickyHeader: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTable'\n})(Table);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'head'\n};\nvar defaultComponent = 'thead';\nvar TableHead = /*#__PURE__*/React.forwardRef(function TableHead(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: Component === defaultComponent ? null : 'rowgroup'\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableHead'\n})(TableHead);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { fade } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: 'inherit',\n      display: 'table-row',\n      verticalAlign: 'middle',\n      // We disable the focus ring for mouse, touch and keyboard users.\n      outline: 0,\n      '&$hover:hover': {\n        backgroundColor: theme.palette.action.hover\n      },\n      '&$selected, &$selected:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.selectedOpacity)\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Pseudo-class applied to the root element if `hover={true}`. */\n    hover: {},\n\n    /* Styles applied to the root element if table variant=\"head\". */\n    head: {},\n\n    /* Styles applied to the root element if table variant=\"footer\". */\n    footer: {}\n  };\n};\nvar defaultComponent = 'tr';\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n */\n\nvar TableRow = /*#__PURE__*/React.forwardRef(function TableRow(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      _props$hover = props.hover,\n      hover = _props$hover === void 0 ? false : _props$hover,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"hover\", \"selected\"]);\n\n  var tablelvl2 = React.useContext(Tablelvl2Context);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, tablelvl2 && {\n      'head': classes.head,\n      'footer': classes.footer\n    }[tablelvl2.variant], hover && classes.hover, selected && classes.selected),\n    role: Component === defaultComponent ? null : 'row'\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableRow.propTypes = {\n  /**\n   * Should be valid <tr> children such as `TableCell`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the table row will shade on hover.\n   */\n  hover: PropTypes.bool,\n\n  /**\n   * If `true`, the table row will have the selected shading.\n   */\n  selected: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableRow'\n})(TableRow);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport { darken, fade, lighten } from '../styles/colorManipulator';\nimport TableContext from '../Table/TableContext';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, {\n      display: 'table-cell',\n      verticalAlign: 'inherit',\n      // Workaround for a rendering bug with spanned columns in Chrome 62.0.\n      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.\n      borderBottom: \"1px solid\\n    \".concat(theme.palette.type === 'light' ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68)),\n      textAlign: 'left',\n      padding: 16\n    }),\n\n    /* Styles applied to the root element if `variant=\"head\"` or `context.table.head`. */\n    head: {\n      color: theme.palette.text.primary,\n      lineHeight: theme.typography.pxToRem(24),\n      fontWeight: theme.typography.fontWeightMedium\n    },\n\n    /* Styles applied to the root element if `variant=\"body\"` or `context.table.body`. */\n    body: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`. */\n    footer: {\n      color: theme.palette.text.secondary,\n      lineHeight: theme.typography.pxToRem(21),\n      fontSize: theme.typography.pxToRem(12)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      padding: '6px 24px 6px 16px',\n      '&:last-child': {\n        paddingRight: 16\n      },\n      '&$paddingCheckbox': {\n        width: 24,\n        // prevent the checkbox column from growing\n        padding: '0 12px 0 16px',\n        '&:last-child': {\n          paddingLeft: 12,\n          paddingRight: 16\n        },\n        '& > *': {\n          padding: 0\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `padding=\"checkbox\"`. */\n    paddingCheckbox: {\n      width: 48,\n      // prevent the checkbox column from growing\n      padding: '0 0 0 4px',\n      '&:last-child': {\n        paddingLeft: 0,\n        paddingRight: 4\n      }\n    },\n\n    /* Styles applied to the root element if `padding=\"none\"`. */\n    paddingNone: {\n      padding: 0,\n      '&:last-child': {\n        padding: 0\n      }\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right',\n      flexDirection: 'row-reverse'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `context.table.stickyHeader={true}`. */\n    stickyHeader: {\n      position: 'sticky',\n      top: 0,\n      left: 0,\n      zIndex: 2,\n      backgroundColor: theme.palette.background.default\n    }\n  };\n};\n/**\n * The component renders a `<th>` element when the parent context is a header\n * or otherwise a `<td>` element.\n */\n\nvar TableCell = /*#__PURE__*/React.forwardRef(function TableCell(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      component = props.component,\n      paddingProp = props.padding,\n      scopeProp = props.scope,\n      sizeProp = props.size,\n      sortDirection = props.sortDirection,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"component\", \"padding\", \"scope\", \"size\", \"sortDirection\", \"variant\"]);\n\n  var table = React.useContext(TableContext);\n  var tablelvl2 = React.useContext(Tablelvl2Context);\n  var isHeadCell = tablelvl2 && tablelvl2.variant === 'head';\n  var role;\n  var Component;\n\n  if (component) {\n    Component = component;\n    role = isHeadCell ? 'columnheader' : 'cell';\n  } else {\n    Component = isHeadCell ? 'th' : 'td';\n  }\n\n  var scope = scopeProp;\n\n  if (!scope && isHeadCell) {\n    scope = 'col';\n  }\n\n  var padding = paddingProp || (table && table.padding ? table.padding : 'default');\n  var size = sizeProp || (table && table.size ? table.size : 'medium');\n  var variant = variantProp || tablelvl2 && tablelvl2.variant;\n  var ariaSort = null;\n\n  if (sortDirection) {\n    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, classes[variant], className, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], padding !== 'default' && classes[\"padding\".concat(capitalize(padding))], size !== 'medium' && classes[\"size\".concat(capitalize(size))], variant === 'head' && table && table.stickyHeader && classes.stickyHeader),\n    \"aria-sort\": ariaSort,\n    role: role,\n    scope: scope\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the table cell content.\n   *\n   * Monetary or generally number fields **should be right aligned** as that allows\n   * you to add them up quickly in your head without having to worry about decimals.\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The table cell contents.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Sets the padding applied to the cell.\n   * By default, the Table parent component set the value (`default`).\n   */\n  padding: PropTypes.oneOf(['checkbox', 'default', 'none']),\n\n  /**\n   * Set scope attribute.\n   */\n  scope: PropTypes.string,\n\n  /**\n   * Specify the size of the cell.\n   * By default, the Table parent component set the value (`medium`).\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * Set aria-sort direction.\n   */\n  sortDirection: PropTypes.oneOf(['asc', 'desc', false]),\n\n  /**\n   * Specify the cell type.\n   * By default, the TableHead, TableBody or TableFooter parent component set the value.\n   */\n  variant: PropTypes.oneOf(['body', 'footer', 'head'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableCell'\n})(TableCell);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-row-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'body'\n};\nvar defaultComponent = 'tbody';\nvar TableBody = /*#__PURE__*/React.forwardRef(function TableBody(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: Component === defaultComponent ? null : 'rowgroup'\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableBody.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableBody'\n})(TableBody);","// import React, { Component } from \"react\";\r\n\r\n// import PropTypes from \"prop-types\";\r\n// import { withRouter, Link } from \"react-router-dom\";\r\n// import { connect } from \"react-redux\";\r\n\r\n// import { withStyles } from \"@material-ui/styles\";\r\n// import { Breadcrumb, SimpleCard } from \"matx\";\r\n// import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\n\r\n// import {\r\n//   Button,\r\n//   Icon,\r\n//   Grid,\r\n//   TextField,\r\n//   IconButton,\r\n//   Table,\r\n//   TableHead,\r\n//   TableRow,\r\n//   TableCell,\r\n//   TableBody \r\n// } from \"@material-ui/core\";\r\n\r\n// import \"date-fns\";\r\n// import { Autocomplete } from \"@material-ui/lab\";\r\n\r\n// import api from \"../../services/api\";\r\n\r\n// class Exercicio extends Component {\r\n//   state = {\r\n//     nome: \"\",\r\n//     tipo: \"\",\r\n//     descricao: \"\",\r\n//     contas: [],\r\n//     movimentacaoDebito: [],\r\n//     movimentacaoCredito: [],\r\n//     totalDebito: 0,\r\n//     totalCredito: 0,\r\n//   };\r\n\r\n//   async componentDidMount(){\r\n//     const contas = await api.get(`getNomePlanoDeContas`);\r\n\r\n//     this.setState({contas: contas.data});\r\n//   }\r\n\r\n//   handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     const name = this._name.value;\r\n\r\n//     console.log(event.target);\r\n\r\n//     console.log(this.el);\r\n\r\n//     const dadosCurso = this.state;\r\n\r\n//     dadosCurso.usuario_inclusao = this.props.user.idusuario;\r\n//     dadosCurso.idprofessor_responsavel = this.props.user.idusuario;\r\n\r\n//     const response = await api.post('storeCurso', dadosCurso);\r\n\r\n    \r\n//   };\r\n\r\n//   handleChange = e => {\r\n    \r\n//     if ([\"valorDebito\", \"quantidadeDebito\"].includes(e.target.className) ) {\r\n      \r\n//       let movimentacaoDebito = [...this.state.movimentacaoDebito]\r\n//       movimentacaoDebito[e.target.dataset.id][e.target.className] = e.target.value.toUpperCase()\r\n//       this.setState({ movimentacaoDebito }, () => console.log(\"Debito\",this.state.movimentacaoDebito));\r\n\r\n//       var valorConta = 0;\r\n//       var movimentacoesPassadas = [];\r\n\r\n//       this.state.movimentacaoDebito.forEach(movimentacaoDebito => {\r\n//         if (movimentacaoDebito.valorDebito && movimentacaoDebito.quantidadeDebito) {\r\n//           movimentacoesPassadas = [...movimentacoesPassadas, (movimentacaoDebito.valorDebito * movimentacaoDebito.quantidadeDebito)];\r\n//         }   \r\n//       });\r\n\r\n//       valorConta = movimentacoesPassadas.reduce((a, b) => a + b, 0);\r\n\r\n//       if (valorConta != 0){          \r\n//         this.setState({totalDebito: valorConta});\r\n//       }\r\n      \r\n//     }\r\n//     else if ([\"valorCredito\", \"quantidadeCredito\"].includes(e.target.className) ) {\r\n      \r\n//       let movimentacaoCredito = [...this.state.movimentacaoCredito]\r\n//       movimentacaoCredito[e.target.dataset.id][e.target.className] = e.target.value.toUpperCase()\r\n//       this.setState({ movimentacaoCredito }, () => console.log(\"Credito\",this.state.movimentacaoCredito))\r\n\r\n//       var valorConta = 0;\r\n//       var movimentacoesPassadas = [];\r\n\r\n//       this.state.movimentacaoCredito.forEach(movimentacaoCredito => {\r\n//         if (movimentacaoCredito.valorCredito && movimentacaoCredito.quantidadeCredito) {\r\n//           movimentacoesPassadas = [...movimentacoesPassadas, (movimentacaoCredito.valorCredito * movimentacaoCredito.quantidadeCredito)];\r\n//         }   \r\n//       });\r\n\r\n//       valorConta = movimentacoesPassadas.reduce((a, b) => a + b, 0);\r\n\r\n//       if (valorConta != 0){          \r\n//         this.setState({totalCredito: valorConta});\r\n//       }\r\n      \r\n//     }\r\n//     else {\r\n//         this.setState({ [e.target.name]: e.target.value });\r\n//     }\r\n\r\n//   };\r\n\r\n//   onDebitoChange = (event, values) => {\r\n//     this.setState({\r\n//       movimentacaoDebito: [...this.state.movimentacaoDebito, values]\r\n//     });\r\n//   }\r\n\r\n//   onCreditoChange = (event, values) => {\r\n//     this.setState({\r\n//       movimentacaoCredito: [...this.state.movimentacaoCredito, values]\r\n//     });\r\n//   }\r\n  \r\n//   render() {\r\n//     let {\r\n//       nome,\r\n//       descricao,\r\n//       contas,\r\n//       movimentacaoCredito,\r\n//       movimentacaoDebito,\r\n//       totalDebito,\r\n//       totalCredito\r\n//     } = this.state;\r\n\r\n//     const {exercicio} = this.props.location.state;\r\n\r\n//     return (\r\n//       <div className=\"m-sm-30\">\r\n\r\n//         <div className=\"mb-sm-30\">\r\n//           <Breadcrumb\r\n//             routeSegments={[\r\n//               { name: \"Meus Cursos\", path: \"/dashboard/analytics\" },\r\n//               { name: \"Detalhes de curso\", path: \"/dashboard/detalhesCurso\" },\r\n//               { name: \"Detalhes de aula\", path: \"/dashboard/detalhesAula\" },\r\n//               { name: \"Exercício\" }\r\n//             ]}\r\n//           />\r\n//         </div>\r\n\r\n//         <SimpleCard title={`${exercicio.nome}`}>\r\n//           <div>\r\n//           <ValidatorForm\r\n//             ref=\"form\"\r\n//             onSubmit={this.handleSubmit}\r\n//             onChange={this.handleChange}\r\n//             onError={errors => null}\r\n//           >\r\n//             <Grid container spacing={6}>\r\n//               <Grid item lg={12} md={12} sm={12} xs={12}>\r\n//                 <TextValidator\r\n//                   className=\"mb-4 w-full\"\r\n//                   label=\"Título\"\r\n//                   type=\"text\"\r\n//                   name=\"nome\"\r\n//                   value={`${exercicio.nome}`}\r\n//                 />\r\n//               </Grid>\r\n//             </Grid>\r\n\r\n//             <Grid style={{marginBottom: 20}} item lg={12} md={12} sm={12} xs={12}>\r\n//                 <TextValidator\r\n//                   className=\"mb-4 w-full\"\r\n//                   label=\"Descrição\"\r\n//                   type=\"text\"\r\n//                   name=\"descricao\"\r\n//                   value={`${exercicio.descricao}`}\r\n//                 />\r\n//             </Grid>\r\n\r\n\r\n//             <Grid container style={{flexDirection: 'row', justifyContent: 'space-between'}} item lg={12} md={12} sm={12} xs={12} spacing={6}>\r\n\r\n//               <Grid item  item lg={6} md={6} sm={12} xs={12}>   \r\n//                 <Grid container style={{flexDirection: 'row', justifyContent: 'space-between'}} spacing={1} item>\r\n\r\n//                   <Grid item lg={8} md={8} sm={8} xs={8}>\r\n//                     <Autocomplete\r\n//                       className=\"mb-6 w-full\"\r\n//                       options={contas}\r\n//                       onChange={this.onDebitoChange}\r\n//                       name=\"tipo\"\r\n//                       getOptionLabel={option => option.nome}\r\n//                       renderInput={params => (\r\n//                         <TextField\r\n//                         {...params}\r\n//                         label={\"Conta(s) Débito\"}\r\n//                         variant=\"outlined\"\r\n//                         placeholder=\"Adicione uma conta débito.\"\r\n//                         fullWidth\r\n//                         />\r\n//                       )}\r\n//                     />\r\n//                   </Grid>  \r\n\r\n//                   <Grid item lg={4} md={4} sm={4} xs={4}>\r\n//                       <TextField\r\n//                         value={totalDebito}\r\n//                         label={\"Total Débito\"}\r\n//                         variant=\"outlined\"                        \r\n//                         fullWidth\r\n//                       />\r\n//                   </Grid>   \r\n\r\n//                 </Grid>\r\n                         \r\n//                 {movimentacaoDebito.length > 0 ? \r\n\r\n//                   <div style={{ border: '1px solid #cecece', marginBottom: 20, borderRadius: 3 }} className=\"overflow-auto\">\r\n//                     <Table  className=\"product-table\">\r\n//                       <TableHead>\r\n//                         <TableRow>\r\n//                           <TableCell className=\"px-6\" colSpan={4}>\r\n//                             Conta\r\n//                           </TableCell>\r\n//                           <TableCell className=\"px-0\" colSpan={2}>\r\n//                             Valor\r\n//                           </TableCell>\r\n//                           <TableCell className=\"px-0\" colSpan={2}>\r\n//                             Atributo\r\n//                           </TableCell>\r\n//                           <TableCell className=\"px-0\" colSpan={1}>\r\n//                             Ação\r\n//                           </TableCell>\r\n//                         </TableRow>\r\n//                       </TableHead>\r\n//                       <TableBody>\r\n//                         {movimentacaoDebito.map((movimentacao, index) => {\r\n//                           let movimentacaoDebitoValor = `valorDebito-${index}`, movimentacaoDebitoQuantidade = `quantidadeDebito-${index}`;\r\n\r\n//                           return (\r\n\r\n//                             <TableRow key={index}>\r\n                            \r\n//                               <TableCell className=\"px-0 capitalize\" colSpan={4} align=\"left\">\r\n//                                 {movimentacao.nome}           \r\n//                               </TableCell>\r\n\r\n//                               <TableCell className=\"px-0\" align=\"left\" colSpan={2}>\r\n\r\n//                                 <input\r\n//                                   // InputProps={{ disableUnderline: true }}\r\n//                                   style={{border: '1px solid #cecece', borderRadius: 3, padding: 5, width: '80%' }}\r\n//                                   type=\"text\"\r\n//                                   data-id={index}\r\n//                                   name={movimentacaoDebitoValor}\r\n//                                   id={movimentacaoDebitoValor}\r\n//                                   value={movimentacaoDebito[index].name} \r\n//                                   placeholder={\"Digite valor\"}\r\n//                                   className=\"valorDebito\"\r\n//                                 />                                \r\n//                               </TableCell>\r\n\r\n//                               <TableCell className=\"px-0\" align=\"left\" colSpan={2}>\r\n//                                 <input\r\n//                                   style={{border: '1px solid #cecece', borderRadius: 3, padding: 5, width: '80%' }}\r\n//                                   data-id={index}\r\n//                                   name={movimentacaoDebitoQuantidade}\r\n//                                   id={movimentacaoDebitoQuantidade}\r\n//                                   value={movimentacaoDebito[index].name} \r\n//                                   placeholder={\"Digite quantidade\"}\r\n//                                   className=\"quantidadeDebito\"\r\n//                                 />\r\n//                               </TableCell>\r\n\r\n//                               <TableCell className=\"px-0\" colSpan={1}>\r\n//                                 <IconButton>\r\n//                                   <Icon color=\"primary\">edit</Icon>\r\n//                                 </IconButton>\r\n//                               </TableCell>\r\n//                             </TableRow>\r\n//                           )\r\n\r\n\r\n                          \r\n//                         })}\r\n//                       </TableBody>\r\n//                     </Table>\r\n//                   </div>\r\n//                 : \r\n                                \r\n//                 <div></div>}\r\n                \r\n//               </Grid>\r\n\r\n//               {/* CONTA CRÉDITO */}\r\n//               <Grid item  item lg={6} md={6} sm={12} xs={12}>                  \r\n//                 <Grid container style={{flexDirection: 'row', justifyContent: 'space-between'}} spacing={1} item>\r\n\r\n//                   <Grid item lg={8} md={8} sm={8} xs={8}>\r\n//                     <Autocomplete\r\n//                       className=\"mb-6 w-full\"\r\n//                       options={contas}\r\n//                       onChange={this.onCreditoChange}\r\n//                       name=\"tipo\"\r\n//                       getOptionLabel={option => option.nome}\r\n//                       renderInput={params => (\r\n//                         <TextField\r\n//                         {...params}\r\n//                         label={\"Conta(s) Crédito\"}\r\n//                         variant=\"outlined\"\r\n//                         placeholder=\"Adicione uma conta crédito.\"\r\n//                         fullWidth\r\n//                         />\r\n//                       )}\r\n//                     />\r\n//                   </Grid>  \r\n\r\n//                   <Grid item lg={4} md={4} sm={4} xs={4}>\r\n//                     <TextField\r\n//                       value={totalCredito}\r\n//                       label={\"Total Crédito\"}\r\n//                       variant=\"outlined\"                        \r\n//                       fullWidth\r\n//                     />\r\n//                   </Grid>    \r\n\r\n//                 </Grid>\r\n\r\n//                 {movimentacaoCredito.length > 0 ? \r\n\r\n//                   <div style={{ border: '1px solid #cecece', marginBottom: 20, borderRadius: 3 }} className=\"overflow-auto\">\r\n//                     <Table  className=\"product-table\">\r\n//                       <TableHead>\r\n//                         <TableRow>\r\n//                           <TableCell className=\"px-6\" colSpan={4}>\r\n//                             Conta\r\n//                           </TableCell>\r\n//                           <TableCell className=\"px-0\" colSpan={2}>\r\n//                             Valor\r\n//                           </TableCell>\r\n//                           <TableCell className=\"px-0\" colSpan={2}>\r\n//                             Quantidade\r\n//                           </TableCell>\r\n//                           <TableCell className=\"px-0\" colSpan={1}>\r\n//                             Ação\r\n//                           </TableCell>\r\n//                         </TableRow>\r\n//                       </TableHead>\r\n//                       <TableBody>\r\n//                         {movimentacaoCredito.map((movimentacao, index) => {\r\n//                           let movimentacaoCreditoValor = `valorCredito-${index}`, movimentacaoCreditoquantidade = `quantidadeCredito-${index}`;\r\n\r\n//                           return (\r\n\r\n//                             <TableRow key={index}>\r\n                            \r\n//                               <TableCell className=\"px-0 capitalize\" colSpan={4} align=\"left\">\r\n//                                 {movimentacao.nome}           \r\n//                               </TableCell>\r\n\r\n//                               <TableCell className=\"px-0\" align=\"left\" colSpan={2}>\r\n\r\n//                                 <input\r\n//                                   // InputProps={{ disableUnderline: true }}\r\n//                                   style={{border: '1px solid #cecece', borderRadius: 3, padding: 5, width: '80%' }}\r\n//                                   type=\"text\"\r\n//                                   data-id={index}\r\n//                                   name={movimentacaoCreditoValor}\r\n//                                   id={movimentacaoCreditoValor}\r\n//                                   value={movimentacaoCredito[index].name} \r\n//                                   className=\"valorCredito\"\r\n//                                 />                                \r\n//                               </TableCell>\r\n\r\n//                               <TableCell className=\"px-0\" align=\"left\" colSpan={2}>\r\n//                                 <input\r\n//                                   style={{border: '1px solid #cecece', borderRadius: 3, padding: 5, width: '80%' }}\r\n//                                   data-id={index}\r\n//                                   name={movimentacaoCreditoquantidade}\r\n//                                   id={movimentacaoCreditoquantidade}\r\n//                                   value={movimentacaoCredito[index].name} \r\n//                                   className=\"quantidadeCredito\"\r\n//                                 />\r\n//                               </TableCell>\r\n\r\n//                               <TableCell className=\"px-0\" colSpan={1}>\r\n//                                 <IconButton>\r\n//                                   <Icon color=\"primary\">edit</Icon>\r\n//                                 </IconButton>\r\n//                               </TableCell>\r\n//                             </TableRow>\r\n//                           )\r\n\r\n\r\n                          \r\n//                         })}\r\n//                       </TableBody>\r\n//                     </Table>\r\n//                   </div>\r\n//                   : \r\n                                \r\n//                   <div></div>}\r\n//               </Grid>\r\n\r\n//             </Grid>  \r\n\r\n//             <Button color=\"primary\" variant=\"contained\" type=\"submit\">\r\n//               <Icon>send</Icon>\r\n//               <span className=\"pl-2 capitalize\">Enviar resposta</span>\r\n//             </Button>\r\n//           </ValidatorForm>\r\n//         </div>\r\n//         </SimpleCard>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// Exercicio.propTypes = {\r\n//   user: PropTypes.object.isRequired,\r\n// };\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//   user: state.user,\r\n// });\r\n\r\n// // export default withStyles({}, { withTheme: true })(Dashboard1);\r\n\r\n// export default withStyles({}, { withTheme: true })(\r\n//   withRouter(\r\n//     connect(mapStateToProps, {\r\n//     })(Exercicio)\r\n//   )\r\n// );\r\n\r\n\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport { Breadcrumb, SimpleCard } from \"matx\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Grid,\r\n  TextField,\r\n  IconButton,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody \r\n} from \"@material-ui/core\";\r\n\r\nimport \"date-fns\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nimport api from \"../../services/api\";\r\n\r\nclass Exercicio extends Component {\r\n  state = {\r\n    idaula: this.props.location.state.aula.idaula,\r\n    contasDebito: [],\r\n    contasCredito: [],\r\n    movimentacaoDebito: [],\r\n    movimentacaoCredito: [],\r\n    totalDebito: 0,\r\n    totalCredito: 0,\r\n    historico: \"\",\r\n  };\r\n\r\n\r\n  async componentDidMount(){\r\n\r\n    const contasAula = await api.get(`getPlanoDeContasAula/${this.props.location.state.aula.idaula}`);\r\n\r\n    var contasDebitoArray = [];\r\n    var contasCreditoArray = [];\r\n\r\n    contasAula.data.forEach(conta => {\r\n      if (conta.tipo == 'D') {\r\n        contasDebitoArray.push(conta);\r\n      }        \r\n      else {\r\n        contasCreditoArray.push(conta);\r\n      }\r\n\r\n    });\r\n\r\n    const resultDebito = [...contasAula.data];\r\n\r\n\r\n    const resultCredito = [...contasAula.data];\r\n\r\n    this.setState({contasDebito: resultDebito});\r\n    this.setState({contasCredito: resultCredito});\r\n\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const dadosExercicio = this.state;\r\n\r\n    dadosExercicio.id_usuario = this.props.user.idusuario;\r\n    dadosExercicio.id_exercicio = this.props.location.state.exercicio.idexercicio;\r\n\r\n    delete dadosExercicio.contasCredito;\r\n    delete dadosExercicio.contasDebito;\r\n\r\n    const response = await api.post('storeExercicioAluno', dadosExercicio);\r\n    \r\n  };\r\n\r\n  handleChange = e => {\r\n    // console.log(e.target.className, e.target.value);\r\n    if ([\"nomeContaDebito\", \"valorDebito\", \"quantidadeDebito\"].includes(e.target.className)) {\r\n      \r\n      let movimentacaoDebito = [...this.state.movimentacaoDebito]\r\n      movimentacaoDebito[e.target.dataset.id][e.target.className] = e.target.value; \r\n      this.setState({ movimentacaoDebito }, () => console.log(\"Debito\",this.state.movimentacaoCredito));\r\n\r\n      var valorConta = 0;\r\n      var movimentacoesPassadas = [];\r\n\r\n      this.state.movimentacaoDebito.forEach(movimentacaoDebito => {\r\n        if (!movimentacaoDebito.quantidadeDebito) \r\n          movimentacaoDebito.quantidadeDebito = 1;\r\n\r\n        if (movimentacaoDebito.valorDebito && movimentacaoDebito.quantidadeDebito) {\r\n          movimentacoesPassadas = [...movimentacoesPassadas, (movimentacaoDebito.valorDebito * movimentacaoDebito.quantidadeDebito)];\r\n        }   \r\n\r\n        movimentacaoDebito.isDebito = true;\r\n      });\r\n\r\n      valorConta = movimentacoesPassadas.reduce((a, b) => a + b, 0);\r\n\r\n      if (valorConta != 0){          \r\n        this.setState({totalDebito: valorConta});\r\n      }\r\n      \r\n    }\r\n\r\n\r\n\r\n    else if ([\"nomeContaCredito\" ,\"valorCredito\", \"quantidadeCredito\"].includes(e.target.className)) {\r\n      \r\n      let movimentacaoCredito = [...this.state.movimentacaoCredito]\r\n      movimentacaoCredito[e.target.dataset.id][e.target.className] = e.target.value;\r\n      this.setState({ movimentacaoCredito }, () => console.log(\"Credito\",this.state.movimentacaoCredito))\r\n\r\n      var valorConta = 0;\r\n      var movimentacoesPassadas = [];\r\n\r\n      this.state.movimentacaoCredito.forEach(movimentacaoCredito => {\r\n        if (!movimentacaoCredito.quantidadeCredito) \r\n          movimentacaoCredito.quantidadeCredito = 1;\r\n\r\n        if (movimentacaoCredito.valorCredito && movimentacaoCredito.quantidadeCredito) {\r\n          movimentacoesPassadas = [...movimentacoesPassadas, (movimentacaoCredito.valorCredito * movimentacaoCredito.quantidadeCredito)];\r\n        }  \r\n        \r\n        movimentacaoCredito.isDebito = false;\r\n\r\n      });\r\n\r\n      valorConta = movimentacoesPassadas.reduce((a, b) => a + b, 0);\r\n\r\n      if (valorConta != 0){          \r\n        this.setState({totalCredito: valorConta});\r\n      }\r\n      \r\n    }\r\n    else {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n  };\r\n\r\n  onDebitoChange = (event, values) => {\r\n    this.setState({\r\n      movimentacaoDebito: [...this.state.movimentacaoDebito, values]\r\n    });\r\n  }\r\n\r\n  onCreditoChange = (event, values) => {\r\n    this.setState({\r\n      movimentacaoCredito: [...this.state.movimentacaoCredito, values]\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    let {\r\n      contasDebito,\r\n      contasCredito,\r\n      movimentacaoCredito,\r\n      movimentacaoDebito,\r\n      totalDebito,\r\n      totalCredito,\r\n      historico\r\n    } = this.state;\r\n\r\n    const {exercicio} = this.props.location.state;\r\n\r\n    return (\r\n      <div className=\"m-sm-30\">\r\n\r\n        <div className=\"mb-sm-30\">\r\n          <Breadcrumb\r\n            routeSegments={[\r\n              { name: \"Meus Cursos\", path: \"/dashboard/analytics\" },\r\n              { name: \"Detalhes de curso\", path: \"/dashboard/detalhesCurso\" },\r\n              { name: \"Detalhes de aula\", path: \"/dashboard/detalhesAula\" },\r\n              { name: \"Exercício\" }\r\n            ]}\r\n          />\r\n        </div>\r\n\r\n        <SimpleCard title=\"Exercício\">\r\n          <div>\r\n          <ValidatorForm\r\n            ref=\"form\"\r\n            onSubmit={this.handleSubmit}\r\n            onChange={this.handleChange}\r\n            onError={errors => null}\r\n          >\r\n            <Grid container spacing={6}>\r\n              <Grid style={{paddingBottom: 30}} item lg={12} md={12} sm={12} xs={12}>\r\n                <h4>{exercicio.nome}</h4>\r\n                <span>{exercicio.descricao}</span>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"mb-4 w-full\"\r\n                  label=\"Histórico\"\r\n                  type=\"text\"\r\n                  name=\"historico\"\r\n                  value={historico}\r\n                />\r\n            </Grid>\r\n\r\n\r\n            <Grid container style={{flexDirection: 'row', justifyContent: 'space-between'}} item lg={12} md={12} sm={12} xs={12} spacing={6}>\r\n\r\n              <Grid item  item lg={6} md={6} sm={12} xs={12}>   \r\n                <Grid container style={{flexDirection: 'row', justifyContent: 'space-between'}} spacing={1} item>\r\n\r\n                  <Grid item lg={8} md={8} sm={8} xs={8}>\r\n                    <Autocomplete\r\n                      className=\"mb-6 w-full\"\r\n                      options={contasDebito}\r\n                      onChange={this.onDebitoChange}\r\n                      name=\"tipo\"\r\n                      getOptionLabel={option => option.nome}\r\n                      renderInput={params => (\r\n                        <TextField\r\n                        {...params}\r\n                        label={\"Conta(s) Débito\"}\r\n                        variant=\"outlined\"\r\n                        placeholder=\"Adicione uma conta débito.\"\r\n                        fullWidth\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>  \r\n\r\n                  <Grid item lg={4} md={4} sm={4} xs={4}>\r\n                      <TextField\r\n                        value={totalDebito}\r\n                        label={\"Total Débito\"}\r\n                        variant=\"outlined\"                        \r\n                        fullWidth\r\n                      />\r\n                  </Grid>   \r\n\r\n                </Grid>\r\n                         \r\n                {movimentacaoDebito.length > 0 ? \r\n\r\n                  <div style={{ border: '1px solid #cecece', marginBottom: 20, borderRadius: 3 }} className=\"overflow-auto\">\r\n                    <Table  className=\"product-table\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell className=\"px-6\" colSpan={4}>\r\n                            Conta\r\n                          </TableCell>\r\n                          <TableCell className=\"px-0\" colSpan={2}>\r\n                            Valor Unitário\r\n                          </TableCell>\r\n                          <TableCell className=\"px-0\" colSpan={2}>\r\n                            Atributo\r\n                          </TableCell>\r\n                          <TableCell className=\"px-0\" colSpan={1}>\r\n                            Ação\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {movimentacaoDebito.map((movimentacao, index) => {\r\n\r\n                          let movimentacaoDebitoValor = `valorDebito-${index}`;\r\n                          let movimentacaoDebitoQuantidade = `quantidadeDebito-${index}`;\r\n\r\n                          return (\r\n                            <TableRow key={index}>\r\n                            \r\n                              <TableCell className=\"px-0 capitalize\" colSpan={4} align=\"left\">\r\n                                {movimentacao.nome}\r\n                              </TableCell>\r\n                                                            \r\n\r\n                              <TableCell style={styleTableCell} className=\"px-0\" align=\"left\" colSpan={2}>\r\n\r\n                                <input\r\n                                  // InputProps={{ disableUnderline: true }}\r\n                                  style={inputStyle}\r\n                                  type=\"text\"\r\n                                  data-id={index}\r\n                                  name={movimentacaoDebitoValor}\r\n                                  id={movimentacaoDebitoValor}\r\n                                  value={movimentacaoDebito[index].name} \r\n                                  placeholder={\"Digite valor\"}\r\n                                  className=\"valorDebito\"\r\n                                />                                \r\n                              </TableCell>\r\n\r\n\r\n                              {movimentacao.atributo == \"quantitativo\" ? \r\n\r\n\r\n                              <TableCell style={styleTableCell} className=\"px-0\" align=\"left\" colSpan={2}>\r\n                                <input\r\n                                  style={inputStyle}\r\n                                  data-id={index}\r\n                                  name={movimentacaoDebitoQuantidade}\r\n                                  id={movimentacaoDebitoQuantidade}\r\n                                  value={movimentacaoDebito[index].name} \r\n                                  placeholder={\"Digite quantidade\"}\r\n                                  className=\"quantidadeDebito\"\r\n                                />\r\n                              </TableCell>\r\n\r\n                              : \r\n                                                            \r\n                              <TableCell style={styleTableCell} className=\"px-0\" align=\"left\" colSpan={2}>\r\n                                <input\r\n                                  disabled\r\n                                  style={inputStyle}\r\n                                  data-id={index}\r\n                                  name={movimentacaoDebitoQuantidade}\r\n                                  id={movimentacaoDebitoQuantidade}\r\n                                  value={movimentacaoDebito[index].name} \r\n                                  placeholder={\"Não quantitativo\"}\r\n                                  className=\"quantidadeDebito\"\r\n                                />\r\n                              </TableCell>\r\n                              }\r\n\r\n                              <TableCell className=\"px-0\" colSpan={1}>\r\n                                <IconButton>\r\n                                  <Icon color=\"primary\">edit</Icon>\r\n                                </IconButton>\r\n                              </TableCell>\r\n\r\n                            </TableRow>\r\n                          )\r\n\r\n\r\n                          \r\n                        })}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </div>\r\n                : \r\n                                \r\n                <div></div>}\r\n                \r\n              </Grid>\r\n\r\n              {/* CONTA CRÉDITO */}\r\n              <Grid item  item lg={6} md={6} sm={12} xs={12}>                  \r\n                <Grid container style={{flexDirection: 'row', justifyContent: 'space-between'}} spacing={1} item>\r\n\r\n                  <Grid item lg={8} md={8} sm={8} xs={8}>\r\n                    <Autocomplete\r\n                      className=\"mb-6 w-full\"\r\n                      options={contasCredito}\r\n                      onChange={this.onCreditoChange}\r\n                      name=\"tipo\"\r\n                      getOptionLabel={option => option.nome}\r\n                      renderInput={params => (\r\n                        <TextField\r\n                        {...params}\r\n                        label={\"Conta(s) Crédito\"}\r\n                        variant=\"outlined\"\r\n                        placeholder=\"Adicione uma conta crédito.\"\r\n                        fullWidth\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>  \r\n\r\n                  <Grid item lg={4} md={4} sm={4} xs={4}>\r\n                    <TextField\r\n                      value={totalCredito}\r\n                      label={\"Total Crédito\"}\r\n                      variant=\"outlined\"                        \r\n                      fullWidth\r\n                    />\r\n                  </Grid>    \r\n\r\n                </Grid>\r\n\r\n                {movimentacaoCredito.length > 0 ? \r\n\r\n                  <div style={{ border: '1px solid #cecece', marginBottom: 20, borderRadius: 3 }} className=\"overflow-auto\">\r\n                    <Table  className=\"product-table\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell className=\"px-6\" colSpan={4}>\r\n                            Conta\r\n                          </TableCell>\r\n                          <TableCell className=\"px-0\" colSpan={2}>\r\n                            Valor Unitário\r\n                          </TableCell>\r\n                          <TableCell className=\"px-0\" colSpan={2}>\r\n                            Atributo\r\n                          </TableCell>\r\n                          <TableCell className=\"px-0\" colSpan={1}>\r\n                            Ação\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {movimentacaoCredito.map((movimentacao, index) => {\r\n                          let movimentacaoCreditoValor = `valorCredito-${index}`;\r\n                          let movimentacaoCreditoquantidade = `quantidadeCredito-${index}`;\r\n\r\n                          return (\r\n\r\n                            <TableRow key={index}>\r\n\r\n                          \r\n                              <TableCell className=\"px-0 capitalize\" colSpan={4} align=\"left\">\r\n                                {movimentacao.nome}\r\n                              </TableCell>\r\n                              \r\n\r\n                              <TableCell style={styleTableCell} className=\"px-0\" align=\"left\" colSpan={2}>\r\n\r\n                                <input\r\n                                  // InputProps={{ disableUnderline: true }}\r\n                                  style={inputStyle}\r\n                                  type=\"text\"\r\n                                  data-id={index}\r\n                                  name={movimentacaoCreditoValor}\r\n                                  id={movimentacaoCreditoValor}\r\n                                  value={movimentacaoCredito[index].name} \r\n                                  className=\"valorCredito\"\r\n                                />                                \r\n                              </TableCell>\r\n\r\n\r\n\r\n                              {movimentacao.atributo == \"quantitativo\" ? \r\n\r\n\r\n                                <TableCell style={styleTableCell} className=\"px-0\" align=\"left\" colSpan={2}>\r\n                                  <input\r\n                                    style={inputStyle}\r\n                                    data-id={index}\r\n                                    name={movimentacaoCreditoquantidade}\r\n                                    id={movimentacaoCreditoquantidade}\r\n                                    value={movimentacaoCredito[index].name} \r\n                                    className=\"quantidadeCredito\"\r\n                                    placeholder={\"Digite a quantidade\"}\r\n\r\n                                  />\r\n                                </TableCell>\r\n\r\n                              : \r\n                                                            \r\n                                <TableCell style={styleTableCell} className=\"px-0\" align=\"left\" colSpan={2}>\r\n                                  <input\r\n                                    disabled\r\n                                    style={inputStyle}\r\n                                    data-id={index}\r\n                                    name={movimentacaoCreditoquantidade}\r\n                                    id={movimentacaoCreditoquantidade}\r\n                                    value={movimentacaoCredito[index].name} \r\n                                    className=\"quantidadeCredito\"\r\n                                    placeholder={\"Não quantitativo\"}\r\n\r\n                                  />\r\n                                </TableCell>\r\n                              }\r\n\r\n\r\n                              <TableCell className=\"px-0\" colSpan={1}>\r\n                                  <IconButton>\r\n                                    <Icon color=\"primary\">edit</Icon>\r\n                                  </IconButton>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                          )\r\n\r\n\r\n                          \r\n                        })}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </div>\r\n                  : \r\n                                \r\n                  <div></div>}\r\n              </Grid>\r\n\r\n            </Grid>  \r\n\r\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\r\n              <Icon>send</Icon>\r\n              <span className=\"pl-2 capitalize\">Criar</span>\r\n            </Button>\r\n          </ValidatorForm>\r\n        </div>\r\n        </SimpleCard>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styleTableCell = {\r\n  // verticalAlign: 'bottom'\r\n};\r\n\r\nconst stylesFont = {\r\n  fontSize: '13px',\r\n  color: '#333'\r\n};\r\n\r\nconst movimentacaoColumnStyle = {\r\n  display: 'flex', \r\n  flexDirection: 'column' \r\n}\r\n\r\nconst inputStyle = {\r\n  border: '1px solid #cecece', \r\n  borderRadius: 3, \r\n  padding: 5, \r\n  width: '80%' \r\n}\r\n\r\n\r\nExercicio.propTypes = {\r\n  user: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  user: state.user,\r\n});\r\n\r\n// export default withStyles({}, { withTheme: true })(Dashboard1);\r\n\r\nexport default withStyles({}, { withTheme: true })(\r\n  withRouter(\r\n    connect(mapStateToProps, {\r\n    })(Exercicio)\r\n  )\r\n);"],"sourceRoot":""}